{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2","program":"C:\\Users\\SamratKS\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","hex","C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=20ca0772e444ed97","-C","extra-filename=-20ca0772e444ed97","--out-dir","c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\test_sered\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\test_sered\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\SamratKS\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\test_sered\\target\\rls\\debug\\deps\\libhex-20ca0772e444ed97.rmeta"},"prelude":{"crate_id":{"name":"hex","disambiguator":[7832718960354957597,3764253193775025516]},"crate_root":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src","external_crates":[{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[13454279496936976369,256594374343364064]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[10635428080862470944,4053010167158610789]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2397070696586021034,1787692942867494326]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13215350897914660053,4762041400992555299]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[8309206586370028958,10530789326598529563]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12844497061290288730,1165546255938205329]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17370511097861102976,8088456066398622915]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":8,"id":{"name":"hashbrown","disambiguator":[1985867887572050615,3717448080532913995]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":9,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[10045986561377339069,14963295625130836827]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[14681916437073319406,9740076823699971540]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","num":11,"id":{"name":"panic_unwind","disambiguator":[4514194809136982995,14217700833302823945]}}],"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":11473,"line_start":1,"line_end":406,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":0,"byte_end":11473,"line_start":1,"line_end":406,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":19},{"krate":0,"index":23},{"krate":0,"index":54},{"krate":0,"index":68},{"krate":0,"index":66},{"krate":0,"index":65},{"krate":0,"index":62},{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":47},{"krate":0,"index":70},{"krate":0,"index":76},{"krate":0,"index":82},{"krate":0,"index":88},{"krate":0,"index":94},{"krate":0,"index":100},{"krate":0,"index":106},{"krate":0,"index":112},{"krate":0,"index":118},{"krate":0,"index":124},{"krate":0,"index":130},{"krate":0,"index":136},{"krate":0,"index":142},{"krate":0,"index":148},{"krate":0,"index":154},{"krate":0,"index":160},{"krate":0,"index":166},{"krate":0,"index":172},{"krate":0,"index":178},{"krate":0,"index":184},{"krate":0,"index":190},{"krate":0,"index":196},{"krate":0,"index":202},{"krate":0,"index":208},{"krate":0,"index":214},{"krate":0,"index":220},{"krate":0,"index":226},{"krate":0,"index":232},{"krate":0,"index":238},{"krate":0,"index":244},{"krate":0,"index":250},{"krate":0,"index":256},{"krate":0,"index":262},{"krate":0,"index":268},{"krate":0,"index":274},{"krate":0,"index":280},{"krate":0,"index":286},{"krate":0,"index":292},{"krate":0,"index":298},{"krate":0,"index":304},{"krate":0,"index":310},{"krate":0,"index":316},{"krate":0,"index":322},{"krate":0,"index":328},{"krate":0,"index":334},{"krate":0,"index":340},{"krate":0,"index":346},{"krate":0,"index":352},{"krate":0,"index":358},{"krate":0,"index":364},{"krate":0,"index":370},{"krate":0,"index":376},{"krate":0,"index":382},{"krate":0,"index":388},{"krate":0,"index":394},{"krate":0,"index":400},{"krate":0,"index":406},{"krate":0,"index":412},{"krate":0,"index":418},{"krate":0,"index":424},{"krate":0,"index":430},{"krate":0,"index":436},{"krate":0,"index":442},{"krate":0,"index":448},{"krate":0,"index":454},{"krate":0,"index":460},{"krate":0,"index":466},{"krate":0,"index":472},{"krate":0,"index":478},{"krate":0,"index":484},{"krate":0,"index":490},{"krate":0,"index":496},{"krate":0,"index":502},{"krate":0,"index":508},{"krate":0,"index":514},{"krate":0,"index":520},{"krate":0,"index":526},{"krate":0,"index":532},{"krate":0,"index":538},{"krate":0,"index":544},{"krate":0,"index":550},{"krate":0,"index":556},{"krate":0,"index":562},{"krate":0,"index":568},{"krate":0,"index":574},{"krate":0,"index":580},{"krate":0,"index":586},{"krate":0,"index":592},{"krate":0,"index":598},{"krate":0,"index":604},{"krate":0,"index":610},{"krate":0,"index":616},{"krate":0,"index":622},{"krate":0,"index":628},{"krate":0,"index":634},{"krate":0,"index":640},{"krate":0,"index":646},{"krate":0,"index":652},{"krate":0,"index":658},{"krate":0,"index":664},{"krate":0,"index":670},{"krate":0,"index":676},{"krate":0,"index":682},{"krate":0,"index":688},{"krate":0,"index":694},{"krate":0,"index":700},{"krate":0,"index":706},{"krate":0,"index":712},{"krate":0,"index":718},{"krate":0,"index":724},{"krate":0,"index":730},{"krate":0,"index":736},{"krate":0,"index":742},{"krate":0,"index":748},{"krate":0,"index":754},{"krate":0,"index":760},{"krate":0,"index":766},{"krate":0,"index":772},{"krate":0,"index":778},{"krate":0,"index":784},{"krate":0,"index":790},{"krate":0,"index":796},{"krate":0,"index":802},{"krate":0,"index":808},{"krate":0,"index":814},{"krate":0,"index":820},{"krate":0,"index":826},{"krate":0,"index":832},{"krate":0,"index":838},{"krate":0,"index":844},{"krate":0,"index":850},{"krate":0,"index":856},{"krate":0,"index":862},{"krate":0,"index":868},{"krate":0,"index":874},{"krate":0,"index":880},{"krate":0,"index":886},{"krate":0,"index":892},{"krate":0,"index":898},{"krate":0,"index":904},{"krate":0,"index":910},{"krate":0,"index":916},{"krate":0,"index":922},{"krate":0,"index":928},{"krate":0,"index":934},{"krate":0,"index":940},{"krate":0,"index":946},{"krate":0,"index":952},{"krate":0,"index":958},{"krate":0,"index":964},{"krate":0,"index":970},{"krate":0,"index":976},{"krate":0,"index":982},{"krate":0,"index":988},{"krate":0,"index":994},{"krate":0,"index":1000},{"krate":0,"index":1006},{"krate":0,"index":1012},{"krate":0,"index":1018},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52}],"decl_id":null,"docs":" Encoding and decoding hex strings.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1357,"byte_end":1362,"line_start":47,"line_end":47,"column_start":11,"column_end":16},"name":"ToHex","qualname":"::ToHex","value":"ToHex","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":17}],"decl_id":null,"docs":" Encoding values as hex string.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1485,"byte_end":1494,"line_start":50,"line_end":50,"column_start":8,"column_end":17},"name":"write_hex","qualname":"::ToHex::write_hex","value":"fn <W> (&self, w: &mut W) -> fmt::Result","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Writes the hex string representing `self` into `w`. Lower case letters\n are used (e.g. `f9b4ca`).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":1665,"byte_end":1680,"line_start":54,"line_end":54,"column_start":8,"column_end":23},"name":"write_hex_upper","qualname":"::ToHex::write_hex_upper","value":"fn <W> (&self, w: &mut W) -> fmt::Result","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Writes the hex string representing `self` into `w`. Upper case letters\n are used (e.g. `F9B4CA`).\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2655,"byte_end":2674,"line_start":87,"line_end":87,"column_start":5,"column_end":24},"name":"InvalidHexCharacter","qualname":"::FromHexError::InvalidHexCharacter","value":"FromHexError::InvalidHexCharacter { c, index }","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" An invalid character was found. Valid ones are: `0...9`, `a...f`\n or `A...F`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2822,"byte_end":2831,"line_start":94,"line_end":94,"column_start":5,"column_end":14},"name":"OddLength","qualname":"::FromHexError::OddLength","value":"FromHexError::OddLength","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" A hex string's length needs to be even, as two digits correspond to\n one byte.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3004,"byte_end":3023,"line_start":99,"line_end":99,"column_start":5,"column_end":24},"name":"InvalidStringLength","qualname":"::FromHexError::InvalidStringLength","value":"FromHexError::InvalidStringLength","parent":{"krate":0,"index":54},"children":[],"decl_id":null,"docs":" If the hex string is decoded into a fixed sized container, such as an\n array, the hex string's length * 2 has to match the container's\n length.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2543,"byte_end":2555,"line_start":84,"line_end":84,"column_start":10,"column_end":22},"name":"FromHexError","qualname":"::FromHexError","value":"FromHexError::{InvalidHexCharacter, OddLength, InvalidStringLength}","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":60}],"decl_id":null,"docs":" The error type for decoding a hex string into `Vec<u8>` or `[u8; N]`.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2534,"byte_end":3026,"line_start":84,"line_end":100,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4263,"byte_end":4270,"line_start":146,"line_end":146,"column_start":11,"column_end":18},"name":"FromHex","qualname":"::FromHex","value":"FromHex: Sized","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39}],"decl_id":null,"docs":" Types that can be decoded from a hex string.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4289,"byte_end":4294,"line_start":147,"line_end":147,"column_start":10,"column_end":15},"name":"Error","qualname":"::FromHex::Error","value":"type Error;","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4573,"byte_end":4581,"line_start":154,"line_end":154,"column_start":8,"column_end":16},"name":"from_hex","qualname":"::FromHex::from_hex","value":"fn <T> (hex: T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":37},"children":[],"decl_id":null,"docs":" Creates an instance of type `Self` from the given hex string, or fails\n with a custom error type.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":7679,"byte_end":7685,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode","value":"fn <T> (data: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using lowercase characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8234,"byte_end":8246,"line_start":269,"line_end":269,"column_start":8,"column_end":20},"name":"encode_upper","qualname":"::encode_upper","value":"fn <T> (data: T) -> String","parent":null,"children":[],"decl_id":null,"docs":" Encodes `data` as hex string using uppercase characters.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":8951,"byte_end":8957,"line_start":292,"line_end":292,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode","value":"fn <T> (data: T) -> Result<Vec<u8>, FromHexError>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a hex string into raw bytes.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2043,"byte_end":2044,"line_start":68,"line_end":68,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3050,"byte_end":3062,"line_start":102,"line_end":102,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3379,"byte_end":3391,"line_start":113,"line_end":113,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":5006,"byte_end":5009,"line_start":171,"line_end":171,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":2043,"byte_end":2044,"line_start":68,"line_end":68,"column_start":32,"column_end":33},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":24},"to":{"krate":0,"index":14}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3050,"byte_end":3062,"line_start":102,"line_end":102,"column_start":23,"column_end":35},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":54},"to":{"krate":1,"index":1537}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":3379,"byte_end":3391,"line_start":113,"line_end":113,"column_start":23,"column_end":35},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":54},"to":{"krate":2,"index":6709}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":4272,"byte_end":4277,"line_start":146,"line_end":146,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":1391},"to":{"krate":0,"index":37}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\hex-0.3.2\\src\\lib.rs","byte_start":5006,"byte_end":5009,"line_start":171,"line_end":171,"column_start":18,"column_end":21},"kind":{"Impl":{"id":3}},"from":{"krate":5,"index":3563},"to":{"krate":0,"index":37}}]}