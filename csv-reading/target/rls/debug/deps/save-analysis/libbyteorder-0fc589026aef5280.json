{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2","program":"C:\\Users\\SamratKS\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","byteorder","C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=0fc589026aef5280","-C","extra-filename=-0fc589026aef5280","--out-dir","c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\csv-reading\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\csv-reading\\target\\rls\\debug\\deps","--cap-lints","allow","--cfg","byteorder_i128","--error-format=json","--sysroot","C:\\Users\\SamratKS\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\csv-reading\\target\\rls\\debug\\deps\\libbyteorder-0fc589026aef5280.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[9162974864748630302,12435571796795162717]},"crate_root":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src","external_crates":[{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[10635428080862470944,4053010167158610789]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[2397070696586021034,1787692942867494326]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13215350897914660053,4762041400992555299]}}],"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":0,"byte_end":103311,"line_start":1,"line_end":3328,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":0,"byte_end":103311,"line_start":1,"line_end":3328,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":27},{"krate":0,"index":171},{"krate":0,"index":186},{"krate":0,"index":185},{"krate":0,"index":183},{"krate":0,"index":181},{"krate":0,"index":178},{"krate":0,"index":176},{"krate":0,"index":174},{"krate":0,"index":172},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":188},{"krate":0,"index":203},{"krate":0,"index":202},{"krate":0,"index":200},{"krate":0,"index":198},{"krate":0,"index":195},{"krate":0,"index":193},{"krate":0,"index":191},{"krate":0,"index":189},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":140}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers in\neither [big-endian or little-endian order].","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":2349,"byte_end":2371,"line_start":70,"line_end":70,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":2406,"byte_end":2412,"line_start":71,"line_end":71,"column_start":35,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":24},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":4472,"byte_end":4478,"line_start":182,"line_end":182,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5724,"byte_end":5733,"line_start":222,"line_end":222,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5968,"byte_end":5976,"line_start":231,"line_end":231,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":6485,"byte_end":6493,"line_start":250,"line_end":250,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 24 bit integer from `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":7026,"byte_end":7034,"line_start":271,"line_end":271,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":7559,"byte_end":7567,"line_start":290,"line_end":290,"column_start":8,"column_end":16},"name":"read_u48","qualname":"::ByteOrder::read_u48","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 48 bit integer from `buf`, stored in u64.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":8100,"byte_end":8108,"line_start":311,"line_end":311,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":8628,"byte_end":8637,"line_start":331,"line_end":331,"column_start":8,"column_end":17},"name":"read_u128","qualname":"::ByteOrder::read_u128","value":"fn (buf: &[u8]) -> u128","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":8598,"byte_end":8620,"line_start":330,"line_end":330,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":9181,"byte_end":9190,"line_start":351,"line_end":351,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":9782,"byte_end":9794,"line_start":372,"line_end":372,"column_start":8,"column_end":20},"name":"read_uint128","qualname":"::ByteOrder::read_uint128","value":"fn (buf: &[u8], nbytes: usize) -> u128","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":9752,"byte_end":9774,"line_start":371,"line_end":371,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":10292,"byte_end":10301,"line_start":391,"line_end":391,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":10818,"byte_end":10827,"line_start":410,"line_end":410,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes an unsigned 24 bit integer `n` to `buf`, stored in u32.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":11372,"byte_end":11381,"line_start":431,"line_end":431,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":39},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":11914,"byte_end":11923,"line_start":450,"line_end":450,"column_start":8,"column_end":17},"name":"write_u48","qualname":"::ByteOrder::write_u48","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes an unsigned 48 bit integer `n` to `buf`, stored in u64.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":12468,"byte_end":12477,"line_start":471,"line_end":471,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":13005,"byte_end":13015,"line_start":491,"line_end":491,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::ByteOrder::write_u128","value":"fn (buf: &mut [u8], n: u128) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes an unsigned 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":12975,"byte_end":12997,"line_start":490,"line_end":490,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":13605,"byte_end":13615,"line_start":511,"line_end":511,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":14253,"byte_end":14266,"line_start":532,"line_end":532,"column_start":8,"column_end":21},"name":"write_uint128","qualname":"::ByteOrder::write_uint128","value":"fn (buf: &mut [u8], n: u128, nbytes: usize) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":14223,"byte_end":14245,"line_start":531,"line_end":531,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":14779,"byte_end":14787,"line_start":552,"line_end":552,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":14762,"byte_end":14771,"line_start":551,"line_end":551,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":15351,"byte_end":15359,"line_start":574,"line_end":574,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 24 bit integer from `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":15334,"byte_end":15343,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":15904,"byte_end":15912,"line_start":596,"line_end":596,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":15887,"byte_end":15896,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":16492,"byte_end":16500,"line_start":618,"line_end":618,"column_start":8,"column_end":16},"name":"read_i48","qualname":"::ByteOrder::read_i48","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 48 bit integer from `buf`, stored in i64.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":16475,"byte_end":16484,"line_start":617,"line_end":617,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":17053,"byte_end":17061,"line_start":640,"line_end":640,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":17036,"byte_end":17045,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":17644,"byte_end":17653,"line_start":663,"line_end":663,"column_start":8,"column_end":17},"name":"read_i128","qualname":"::ByteOrder::read_i128","value":"fn (buf: &[u8]) -> i128","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 128 bit integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":17600,"byte_end":17622,"line_start":661,"line_end":661,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":17627,"byte_end":17636,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":18251,"byte_end":18259,"line_start":686,"line_end":686,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":18234,"byte_end":18243,"line_start":685,"line_end":685,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":18926,"byte_end":18937,"line_start":710,"line_end":710,"column_start":8,"column_end":19},"name":"read_int128","qualname":"::ByteOrder::read_int128","value":"fn (buf: &[u8], nbytes: usize) -> i128","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":18882,"byte_end":18904,"line_start":708,"line_end":708,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":18909,"byte_end":18918,"line_start":709,"line_end":709,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":19555,"byte_end":19563,"line_start":733,"line_end":733,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":19538,"byte_end":19547,"line_start":732,"line_end":732,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":20183,"byte_end":20191,"line_start":756,"line_end":756,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":20166,"byte_end":20175,"line_start":755,"line_end":755,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":20764,"byte_end":20773,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":20747,"byte_end":20756,"line_start":777,"line_end":777,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":21349,"byte_end":21358,"line_start":800,"line_end":800,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a signed 24 bit integer `n` to `buf`, stored in i32.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":21332,"byte_end":21341,"line_start":799,"line_end":799,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":21915,"byte_end":21924,"line_start":822,"line_end":822,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":21898,"byte_end":21907,"line_start":821,"line_end":821,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":22516,"byte_end":22525,"line_start":844,"line_end":844,"column_start":8,"column_end":17},"name":"write_i48","qualname":"::ByteOrder::write_i48","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a signed 48 bit integer `n` to `buf`, stored in i64.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":22499,"byte_end":22508,"line_start":843,"line_end":843,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":23090,"byte_end":23099,"line_start":866,"line_end":866,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":23073,"byte_end":23082,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":23701,"byte_end":23711,"line_start":889,"line_end":889,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::ByteOrder::write_i128","value":"fn (buf: &mut [u8], n: i128) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a signed 128 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":23657,"byte_end":23679,"line_start":887,"line_end":887,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":23684,"byte_end":23693,"line_start":888,"line_end":888,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":24352,"byte_end":24361,"line_start":912,"line_end":912,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":24335,"byte_end":24344,"line_start":911,"line_end":911,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":25080,"byte_end":25092,"line_start":936,"line_end":936,"column_start":8,"column_end":20},"name":"write_int128","qualname":"::ByteOrder::write_int128","value":"fn (buf: &mut [u8], n: i128, nbytes: usize) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":25036,"byte_end":25058,"line_start":934,"line_end":934,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":25063,"byte_end":25072,"line_start":935,"line_end":935,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":25722,"byte_end":25731,"line_start":959,"line_end":959,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":25705,"byte_end":25714,"line_start":958,"line_end":958,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":26380,"byte_end":26389,"line_start":983,"line_end":983,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":26363,"byte_end":26372,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":27164,"byte_end":27177,"line_start":1009,"line_end":1009,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"fn (src: &[u8], dst: &mut [u16]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":27857,"byte_end":27870,"line_start":1032,"line_end":1032,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":28550,"byte_end":28563,"line_start":1055,"line_end":1055,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":29275,"byte_end":29289,"line_start":1079,"line_end":1079,"column_start":8,"column_end":22},"name":"read_u128_into","qualname":"::ByteOrder::read_u128_into","value":"fn (src: &[u8], dst: &mut [u128]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":29245,"byte_end":29267,"line_start":1078,"line_end":1078,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":29975,"byte_end":29988,"line_start":1103,"line_end":1103,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"fn (src: &[u8], dst: &mut [i16]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads signed 16 bit integers from `src` to `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":29958,"byte_end":29967,"line_start":1102,"line_end":1102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":30842,"byte_end":30855,"line_start":1132,"line_end":1132,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"fn (src: &[u8], dst: &mut [i32]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":30825,"byte_end":30834,"line_start":1131,"line_end":1131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":31710,"byte_end":31723,"line_start":1161,"line_end":1161,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"fn (src: &[u8], dst: &mut [i64]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":31693,"byte_end":31702,"line_start":1160,"line_end":1160,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":32610,"byte_end":32624,"line_start":1191,"line_end":1191,"column_start":8,"column_end":22},"name":"read_i128_into","qualname":"::ByteOrder::read_i128_into","value":"fn (src: &[u8], dst: &mut [i128]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":32566,"byte_end":32588,"line_start":1189,"line_end":1189,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":32593,"byte_end":32602,"line_start":1190,"line_end":1190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":33537,"byte_end":33550,"line_start":1221,"line_end":1221,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::ByteOrder::read_f32_into","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":33520,"byte_end":33529,"line_start":1220,"line_end":1220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":34642,"byte_end":34665,"line_start":1255,"line_end":1255,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":34549,"byte_end":34558,"line_start":1253,"line_end":1253,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f32_into` instead\")","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":34563,"byte_end":34634,"line_start":1254,"line_end":1254,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":35459,"byte_end":35472,"line_start":1282,"line_end":1282,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::ByteOrder::read_f64_into","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":35442,"byte_end":35451,"line_start":1281,"line_end":1281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":36573,"byte_end":36596,"line_start":1317,"line_end":1317,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" **DEPRECATED**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":36480,"byte_end":36489,"line_start":1315,"line_end":1315,"column_start":5,"column_end":14}},{"value":"deprecated(since = \"1.3.0\", note = \"please use `read_f64_into` instead\")","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":36494,"byte_end":36565,"line_start":1316,"line_end":1316,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":37322,"byte_end":37336,"line_start":1342,"line_end":1342,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"fn (src: &[u16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes unsigned 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":38017,"byte_end":38031,"line_start":1365,"line_end":1365,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"fn (src: &[u32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes unsigned 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":38712,"byte_end":38726,"line_start":1388,"line_end":1388,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"fn (src: &[u64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes unsigned 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":39439,"byte_end":39454,"line_start":1412,"line_end":1412,"column_start":8,"column_end":23},"name":"write_u128_into","qualname":"::ByteOrder::write_u128_into","value":"fn (src: &[u128], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes unsigned 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":39409,"byte_end":39431,"line_start":1411,"line_end":1411,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":40129,"byte_end":40143,"line_start":1435,"line_end":1435,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"fn (src: &[i16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes signed 16 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":40980,"byte_end":40994,"line_start":1463,"line_end":1463,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"fn (src: &[i32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes signed 32 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":41831,"byte_end":41845,"line_start":1491,"line_end":1491,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"fn (src: &[i64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes signed 64 bit integers from `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":42714,"byte_end":42729,"line_start":1520,"line_end":1520,"column_start":8,"column_end":23},"name":"write_i128_into","qualname":"::ByteOrder::write_i128_into","value":"fn (src: &[i128], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes signed 128 bit integers from `src` into `dst`.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":42684,"byte_end":42706,"line_start":1519,"line_end":1519,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":43655,"byte_end":43669,"line_start":1551,"line_end":1551,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"fn (src: &[f32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes IEEE754 single-precision (4 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":44593,"byte_end":44607,"line_start":1582,"line_end":1582,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"fn (src: &[f64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Writes IEEE754 double-precision (8 bytes) floating point numbers from\n `src` into `dst`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":45348,"byte_end":45362,"line_start":1606,"line_end":1606,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"fn (numbers: &mut [u16]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 16 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":45937,"byte_end":45951,"line_start":1625,"line_end":1625,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"fn (numbers: &mut [u32]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 32 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":46526,"byte_end":46540,"line_start":1644,"line_end":1644,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"fn (numbers: &mut [u64]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 64 bit integers to a particular\n endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":47146,"byte_end":47161,"line_start":1664,"line_end":1664,"column_start":8,"column_end":23},"name":"from_slice_u128","qualname":"::ByteOrder::from_slice_u128","value":"fn (numbers: &mut [u128]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of unsigned 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":47116,"byte_end":47138,"line_start":1663,"line_end":1663,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":47747,"byte_end":47761,"line_start":1684,"line_end":1684,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"fn (src: &mut [i16]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 16 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":47730,"byte_end":47739,"line_start":1683,"line_end":1683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":48499,"byte_end":48513,"line_start":1709,"line_end":1709,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"fn (src: &mut [i32]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 32 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":48482,"byte_end":48491,"line_start":1708,"line_end":1708,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":49251,"byte_end":49265,"line_start":1734,"line_end":1734,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"fn (src: &mut [i64]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 64 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":49234,"byte_end":49243,"line_start":1733,"line_end":1733,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":50034,"byte_end":50049,"line_start":1760,"line_end":1760,"column_start":8,"column_end":23},"name":"from_slice_i128","qualname":"::ByteOrder::from_slice_i128","value":"fn (src: &mut [i128]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of signed 128 bit integers to a particular\n endianness.","sig":null,"attributes":[{"value":"cfg(byteorder_i128)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":49990,"byte_end":50012,"line_start":1758,"line_end":1758,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":50017,"byte_end":50026,"line_start":1759,"line_end":1759,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":50473,"byte_end":50487,"line_start":1772,"line_end":1772,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"fn (numbers: &mut [f32]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 single-precision (4 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":50757,"byte_end":50771,"line_start":1779,"line_end":1779,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"fn (numbers: &mut [f64]) -> ()","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Converts the given slice of IEEE754 double-precision (8 bytes) floating\n point numbers to a particular endianness.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":171},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":51282,"byte_end":51291,"line_start":1799,"line_end":1799,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":51273,"byte_end":51294,"line_start":1799,"line_end":1799,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":51273,"byte_end":51294,"line_start":1799,"line_end":1799,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":51490,"byte_end":51492,"line_start":1810,"line_end":1810,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":52007,"byte_end":52019,"line_start":1829,"line_end":1829,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":51998,"byte_end":52022,"line_start":1829,"line_end":1829,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":51998,"byte_end":52022,"line_start":1829,"line_end":1829,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":52236,"byte_end":52238,"line_start":1840,"line_end":1840,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":52963,"byte_end":52976,"line_start":1866,"line_end":1866,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":53290,"byte_end":53302,"line_start":1877,"line_end":1877,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":53248,"byte_end":53280,"line_start":1876,"line_end":1876,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":4508,"byte_end":4520,"line_start":183,"line_end":183,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":4551,"byte_end":4560,"line_start":184,"line_end":184,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":51313,"byte_end":51322,"line_start":1801,"line_end":1801,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":52041,"byte_end":52053,"line_start":1831,"line_end":1831,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":55543,"byte_end":55552,"line_start":1957,"line_end":1957,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":61258,"byte_end":61270,"line_start":2172,"line_end":2172,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":4508,"byte_end":4520,"line_start":183,"line_end":183,"column_start":28,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":188},"to":{"krate":0,"index":24}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":4551,"byte_end":4560,"line_start":184,"line_end":184,"column_start":28,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":171},"to":{"krate":0,"index":24}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5740,"byte_end":5745,"line_start":223,"line_end":223,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2002},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5748,"byte_end":5752,"line_start":223,"line_end":223,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":1394},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5755,"byte_end":5760,"line_start":223,"line_end":223,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":6707},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5763,"byte_end":5770,"line_start":223,"line_end":223,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":2026},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5773,"byte_end":5775,"line_start":223,"line_end":223,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":1886},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5778,"byte_end":5782,"line_start":223,"line_end":223,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":6364},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5785,"byte_end":5788,"line_start":223,"line_end":223,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":1,"index":1906},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5791,"byte_end":5800,"line_start":223,"line_end":223,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":1,"index":1882},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5803,"byte_end":5813,"line_start":223,"line_end":223,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":1,"index":1916},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":5829,"byte_end":5835,"line_start":224,"line_end":224,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":24},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":51313,"byte_end":51322,"line_start":1801,"line_end":1801,"column_start":18,"column_end":27},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":171},"to":{"krate":1,"index":2026}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":52041,"byte_end":52053,"line_start":1831,"line_end":1831,"column_start":18,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":2026}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":55543,"byte_end":55552,"line_start":1957,"line_end":1957,"column_start":20,"column_end":29},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":171},"to":{"krate":0,"index":27}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-1.3.2\\src\\lib.rs","byte_start":61258,"byte_end":61270,"line_start":2172,"line_end":2172,"column_start":20,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":188},"to":{"krate":0,"index":27}}]}