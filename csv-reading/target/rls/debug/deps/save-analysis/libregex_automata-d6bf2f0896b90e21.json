{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8","program":"C:\\Users\\SamratKS\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","regex_automata","C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=d6bf2f0896b90e21","-C","extra-filename=-d6bf2f0896b90e21","--out-dir","c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\csv-reading\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\csv-reading\\target\\rls\\debug\\deps","--extern","byteorder=c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\csv-reading\\target\\rls\\debug\\deps\\libbyteorder-0fc589026aef5280.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\SamratKS\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\SamratKS\\Desktop\\Others\\Rust\\csv-reading\\target\\rls\\debug\\deps\\libregex_automata-d6bf2f0896b90e21.rmeta"},"prelude":{"crate_id":{"name":"regex_automata","disambiguator":[3866520302095544762,1100993103027165082]},"crate_root":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src","external_crates":[{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","num":1,"id":{"name":"core","disambiguator":[10635428080862470944,4053010167158610789]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[2397070696586021034,1787692942867494326]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[13215350897914660053,4762041400992555299]}},{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","num":4,"id":{"name":"byteorder","disambiguator":[9162974864748630302,12435571796795162717]}}],"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":0,"byte_end":15595,"line_start":1,"line_end":355,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":13870,"byte_end":13878,"line_start":297,"line_end":297,"column_start":16,"column_end":24},"alias_span":null,"name":"DenseDFA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":13893,"byte_end":13896,"line_start":298,"line_end":298,"column_start":14,"column_end":17},"alias_span":null,"name":"DFA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":13972,"byte_end":13977,"line_start":301,"line_end":301,"column_start":16,"column_end":21},"alias_span":null,"name":"Regex","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":14048,"byte_end":14057,"line_start":304,"line_end":304,"column_start":17,"column_end":26},"alias_span":null,"name":"SparseDFA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":14077,"byte_end":14084,"line_start":305,"line_end":305,"column_start":19,"column_end":26},"alias_span":null,"name":"StateID","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":14812,"byte_end":14813,"line_start":335,"line_end":335,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"DenseDFA, MASK_ANCHORED","parent":{"krate":0,"index":334}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":15591,"byte_end":15592,"line_start":354,"line_end":354,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"SparseDFA","parent":{"krate":0,"index":336}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":0,"byte_end":15595,"line_start":1,"line_end":355,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":36},{"krate":0,"index":144},{"krate":0,"index":174},{"krate":0,"index":202},{"krate":0,"index":289},{"krate":0,"index":334},{"krate":0,"index":336}],"decl_id":null,"docs":"A low level regular expression library that uses deterministic finite automata.\nIt supports a rich syntax with Unicode support, has extensive options for\nconfiguring the best space vs time trade off for your use case and provides\nsupport for cheap deserialization of automata for use in `no_std` environments.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":13618,"byte_end":13640,"line_start":285,"line_end":285,"column_start":1,"column_end":23}},{"value":"no_std","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":13675,"byte_end":13681,"line_start":286,"line_end":286,"column_start":35,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":349},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":27066,"byte_end":27074,"line_start":144,"line_end":144,"column_start":5,"column_end":13},"name":"Standard","qualname":"::dense_imp::DenseDFA::Standard","value":"DenseDFA::Standard(Standard<T, S>)","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" A standard DFA that does not use premultiplication or byte classes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":352},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":27555,"byte_end":27564,"line_start":153,"line_end":153,"column_start":5,"column_end":14},"name":"ByteClass","qualname":"::dense_imp::DenseDFA::ByteClass","value":"DenseDFA::ByteClass(ByteClass<T, S>)","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" A DFA that shrinks its alphabet to a set of equivalence classes instead\n of using all possible byte values. Any two bytes belong to the same\n equivalence class if and only if they can be used interchangeably\n anywhere in the DFA while never discriminating between a match and a\n non-match.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":355},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":27951,"byte_end":27964,"line_start":161,"line_end":161,"column_start":5,"column_end":18},"name":"Premultiplied","qualname":"::dense_imp::DenseDFA::Premultiplied","value":"DenseDFA::Premultiplied(Premultiplied<T, S>)","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" A DFA that premultiplies all of its state identifiers in its\n transition table. This saves an instruction per byte at match time\n which improves search performance.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":358},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":28108,"byte_end":28130,"line_start":164,"line_end":164,"column_start":5,"column_end":27},"name":"PremultipliedByteClass","qualname":"::dense_imp::DenseDFA::PremultipliedByteClass","value":"DenseDFA::PremultipliedByteClass(PremultipliedByteClass<T, S>)","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" The default configuration of a DFA, which uses byte classes and\n premultiplies its state identifiers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":361},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":28440,"byte_end":28455,"line_start":171,"line_end":171,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::dense_imp::DenseDFA::__Nonexhaustive","value":"DenseDFA::__Nonexhaustive","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":346},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":26948,"byte_end":26956,"line_start":142,"line_end":142,"column_start":10,"column_end":18},"name":"DenseDFA","qualname":"::dense_imp::DenseDFA","value":"DenseDFA::{Standard, ByteClass, Premultiplied, PremultipliedByteClass, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":349},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":361}],"decl_id":null,"docs":" A dense table-based deterministic finite automaton (DFA).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":30945,"byte_end":30951,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<DenseDFA<T, S>>::as_ref","value":"fn <'a> (&'a self) -> DenseDFA<&'a [S], S>","parent":null,"children":[],"decl_id":null,"docs":" Cheaply return a borrowed version of this dense DFA. Specifically, the\n DFA returned always uses `&[S]` for its transition table while keeping\n the same state identifier representation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":33084,"byte_end":33096,"line_start":297,"line_end":297,"column_start":12,"column_end":24},"name":"memory_usage","qualname":"<DenseDFA<T, S>>::memory_usage","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory usage, in bytes, of this DFA.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":42955,"byte_end":42965,"line_start":518,"line_end":518,"column_start":19,"column_end":29},"name":"from_bytes","qualname":"<DenseDFA<&'a [S], S>>::from_bytes","value":"fn (buf: &'a [u8]) -> DenseDFA<&'a [S], S>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a DFA with a specific state identifier representation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":48423,"byte_end":48431,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"Standard","qualname":"::dense_imp::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A standard dense DFA that does not use premultiplication or byte classes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":384},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":50361,"byte_end":50370,"line_start":733,"line_end":733,"column_start":12,"column_end":21},"name":"ByteClass","qualname":"::dense_imp::ByteClass","value":"","parent":null,"children":[],"decl_id":null,"docs":" A dense DFA that shrinks its alphabet.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":397},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":52308,"byte_end":52321,"line_start":794,"line_end":794,"column_start":12,"column_end":25},"name":"Premultiplied","qualname":"::dense_imp::Premultiplied","value":"","parent":null,"children":[],"decl_id":null,"docs":" A dense DFA that premultiplies all of its state identifiers in its\n transition table.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":410},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":53866,"byte_end":53888,"line_start":847,"line_end":847,"column_start":12,"column_end":34},"name":"PremultipliedByteClass","qualname":"::dense_imp::PremultipliedByteClass","value":"","parent":null,"children":[],"decl_id":null,"docs":" The default configuration of a dense DFA, which uses byte classes and\n premultiplies its state identifiers.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":114031,"byte_end":114034,"line_start":19,"line_end":19,"column_start":11,"column_end":14},"name":"DFA","qualname":"::dfa::DFA","value":"DFA","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"decl_id":null,"docs":" A trait describing the interface of a deterministic finite automaton (DFA).","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":114193,"byte_end":114195,"line_start":23,"line_end":23,"column_start":10,"column_end":12},"name":"ID","qualname":"::dfa::DFA::ID","value":"type ID: StateID;","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" The representation used for state identifiers in this DFA.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":114271,"byte_end":114282,"line_start":26,"line_end":26,"column_start":8,"column_end":19},"name":"start_state","qualname":"::dfa::DFA::start_state","value":"fn (&self) -> Self::ID","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Return the identifier of this DFA's start state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":114406,"byte_end":114420,"line_start":30,"line_end":30,"column_start":8,"column_end":22},"name":"is_match_state","qualname":"::dfa::DFA::is_match_state","value":"fn (&self, id: Self::ID) -> bool","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns true if and only if the given identifier corresponds to a match\n state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":114655,"byte_end":114668,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"is_dead_state","qualname":"::dfa::DFA::is_dead_state","value":"fn (&self, id: Self::ID) -> bool","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns true if and only if the given identifier corresponds to a dead\n state. When a DFA enters a dead state, it is impossible to leave and\n thus can never lead to a match.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":115155,"byte_end":115177,"line_start":45,"line_end":45,"column_start":8,"column_end":30},"name":"is_match_or_dead_state","qualname":"::dfa::DFA::is_match_or_dead_state","value":"fn (&self, id: Self::ID) -> bool","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns true if and only if the given identifier corresponds to either\n a dead state or a match state, such that one of `is_match_state(id)`\n or `is_dead_state(id)` must return true.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":115384,"byte_end":115395,"line_start":51,"line_end":51,"column_start":8,"column_end":19},"name":"is_anchored","qualname":"::dfa::DFA::is_anchored","value":"fn (&self) -> bool","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns true if and only if this DFA is anchored.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":115647,"byte_end":115657,"line_start":56,"line_end":56,"column_start":8,"column_end":18},"name":"next_state","qualname":"::dfa::DFA::next_state","value":"fn (&self, current: Self::ID, input: u8) -> Self::ID","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Given the current state that this DFA is in and the next input byte,\n this method returns the identifier of the next state. The identifier\n returned is always valid, but it may correspond to a dead state.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":116100,"byte_end":116120,"line_start":63,"line_end":63,"column_start":15,"column_end":35},"name":"next_state_unchecked","qualname":"::dfa::DFA::next_state_unchecked","value":"fn (&self, current: Self::ID, input: u8) -> Self::ID","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Like `next_state`, but its implementation may look up the next state\n without memory safety checks such as bounds checks. As such, callers\n must ensure that the given identifier corresponds to a valid DFA\n state. Implementors must, in turn, ensure that this routine is safe\n for all valid state identifiers and for all possible `u8` values.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":117080,"byte_end":117088,"line_start":91,"line_end":91,"column_start":8,"column_end":16},"name":"is_match","qualname":"::dfa::DFA::is_match","value":"fn (&self, bytes: &[u8]) -> bool","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns true if and only if the given bytes match this DFA.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":117063,"byte_end":117072,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":118225,"byte_end":118239,"line_start":121,"line_end":121,"column_start":8,"column_end":22},"name":"shortest_match","qualname":"::dfa::DFA::shortest_match","value":"fn (&self, bytes: &[u8]) -> Option<usize>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns the first position at which a match is found.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":118208,"byte_end":118217,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":120523,"byte_end":120527,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"find","qualname":"::dfa::DFA::find","value":"fn (&self, bytes: &[u8]) -> Option<usize>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns the end offset of the longest match. If no match exists,\n then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":120506,"byte_end":120515,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":121728,"byte_end":121733,"line_start":199,"line_end":199,"column_start":8,"column_end":13},"name":"rfind","qualname":"::dfa::DFA::rfind","value":"fn (&self, bytes: &[u8]) -> Option<usize>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns the start offset of the longest match in reverse, by searching\n from the end of the input towards the start of the input. If no match\n exists, then `None` is returned. In other words, this has the same\n match semantics as `find`, but in reverse.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":121711,"byte_end":121720,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":122151,"byte_end":122162,"line_start":210,"line_end":210,"column_start":8,"column_end":19},"name":"is_match_at","qualname":"::dfa::DFA::is_match_at","value":"fn (&self, bytes: &[u8], start: usize) -> bool","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns the same as `is_match`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":122134,"byte_end":122143,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":123031,"byte_end":123048,"line_start":235,"line_end":235,"column_start":8,"column_end":25},"name":"shortest_match_at","qualname":"::dfa::DFA::shortest_match_at","value":"fn (&self, bytes: &[u8], start: usize) -> Option<usize>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns the same as `shortest_match`, but starts the search at the\n given offset.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":123014,"byte_end":123023,"line_start":234,"line_end":234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":124111,"byte_end":124118,"line_start":265,"line_end":265,"column_start":8,"column_end":15},"name":"find_at","qualname":"::dfa::DFA::find_at","value":"fn (&self, bytes: &[u8], start: usize) -> Option<usize>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns the same as `find`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":124094,"byte_end":124103,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":125260,"byte_end":125268,"line_start":298,"line_end":298,"column_start":8,"column_end":16},"name":"rfind_at","qualname":"::dfa::DFA::rfind_at","value":"fn (&self, bytes: &[u8], start: usize) -> Option<usize>","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Returns the same as `rfind`, but starts the search at the given\n offset.","sig":null,"attributes":[{"value":"inline(never)","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dfa.rs","byte_start":125236,"byte_end":125252,"line_start":297,"line_end":297,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":131394,"byte_end":131399,"line_start":109,"line_end":109,"column_start":12,"column_end":17},"name":"Regex","qualname":"::regex::Regex","value":"Regex {  }","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" A regular expression that uses deterministic finite automata for fast\n searching.","sig":null,"attributes":[{"value":"cfg(not(feature = \"std\"))","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":131330,"byte_end":131358,"line_start":107,"line_end":107,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":134197,"byte_end":134205,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"is_match","qualname":"<Regex<D>>::is_match","value":"fn (&self, input: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given bytes match.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":135205,"byte_end":135219,"line_start":217,"line_end":217,"column_start":12,"column_end":26},"name":"shortest_match","qualname":"<Regex<D>>::shortest_match","value":"fn (&self, input: &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first position at which a match is found.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":136781,"byte_end":136785,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"find","qualname":"<Regex<D>>::find","value":"fn (&self, input: &[u8]) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the start and end offset of the leftmost first match. If no\n match exists, then `None` is returned.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":137191,"byte_end":137202,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"is_match_at","qualname":"<Regex<D>>::is_match_at","value":"fn (&self, input: &[u8], start: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `is_match`, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":137628,"byte_end":137645,"line_start":272,"line_end":272,"column_start":12,"column_end":29},"name":"shortest_match_at","qualname":"<Regex<D>>::shortest_match_at","value":"fn (&self, input: &[u8], start: usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `shortest_match`, but starts the search at the\n given offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":138107,"byte_end":138114,"line_start":286,"line_end":286,"column_start":12,"column_end":19},"name":"find_at","qualname":"<Regex<D>>::find_at","value":"fn (&self, input: &[u8], start: usize) -> Option<(usize, usize)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the same as `find`, but starts the search at the given\n offset.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":139596,"byte_end":139605,"line_start":326,"line_end":326,"column_start":12,"column_end":21},"name":"find_iter","qualname":"<Regex<D>>::find_iter","value":"fn <'r, 't> (&'r self, input: &'t [u8]) -> Matches<'r, 't, D>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all non-overlapping leftmost first matches\n in the given bytes. If no match exists, then the iterator yields no\n elements.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":141895,"byte_end":141904,"line_start":391,"line_end":391,"column_start":12,"column_end":21},"name":"from_dfas","qualname":"<Regex<D>>::from_dfas","value":"fn (forward: D, reverse: D) -> Regex<D>","parent":null,"children":[],"decl_id":null,"docs":" Build a new regex from its constituent forward and reverse DFAs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":142064,"byte_end":142071,"line_start":396,"line_end":396,"column_start":12,"column_end":19},"name":"forward","qualname":"<Regex<D>>::forward","value":"fn (&self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying DFA responsible for forward matching.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":142195,"byte_end":142202,"line_start":401,"line_end":401,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Regex<D>>::reverse","value":"fn (&self) -> &D","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying DFA responsible for reverse matching.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":142829,"byte_end":142836,"line_start":418,"line_end":418,"column_start":12,"column_end":19},"name":"Matches","qualname":"::regex::Matches","value":"Matches {  }","parent":null,"children":[{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458}],"decl_id":null,"docs":" An iterator over all non-overlapping matches for a particular search.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":472},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":163217,"byte_end":163225,"line_start":111,"line_end":111,"column_start":5,"column_end":13},"name":"Standard","qualname":"::sparse_imp::SparseDFA::Standard","value":"SparseDFA::Standard(Standard<T, S>)","parent":{"krate":0,"index":469},"children":[],"decl_id":null,"docs":" A standard DFA that does not use byte classes.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":475},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":163951,"byte_end":163960,"line_start":123,"line_end":123,"column_start":5,"column_end":14},"name":"ByteClass","qualname":"::sparse_imp::SparseDFA::ByteClass","value":"SparseDFA::ByteClass(ByteClass<T, S>)","parent":{"krate":0,"index":469},"children":[],"decl_id":null,"docs":" A DFA that shrinks its alphabet to a set of equivalence classes instead\n of using all possible byte values. Any two bytes belong to the same\n equivalence class if and only if they can be used interchangeably\n anywhere in the DFA while never discriminating between a match and a\n non-match.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":478},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":164257,"byte_end":164272,"line_start":130,"line_end":130,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::sparse_imp::SparseDFA::__Nonexhaustive","value":"SparseDFA::__Nonexhaustive","parent":{"krate":0,"index":469},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":469},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":163110,"byte_end":163119,"line_start":109,"line_end":109,"column_start":10,"column_end":19},"name":"SparseDFA","qualname":"::sparse_imp::SparseDFA","value":"SparseDFA::{Standard, ByteClass, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478}],"decl_id":null,"docs":" A sparse table-based deterministic finite automaton (DFA).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":166672,"byte_end":166678,"line_start":198,"line_end":198,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<SparseDFA<T, S>>::as_ref","value":"fn <'a> (&'a self) -> SparseDFA<&'a [u8], S>","parent":null,"children":[],"decl_id":null,"docs":" Cheaply return a borrowed version of this sparse DFA. Specifically, the\n DFA returned always uses `&[u8]` for its transition table while keeping\n the same state identifier representation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":168218,"byte_end":168230,"line_start":237,"line_end":237,"column_start":12,"column_end":24},"name":"memory_usage","qualname":"<SparseDFA<T, S>>::memory_usage","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory usage, in bytes, of this DFA.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":176072,"byte_end":176082,"line_start":410,"line_end":410,"column_start":19,"column_end":29},"name":"from_bytes","qualname":"<SparseDFA<&'a [u8], S>>::from_bytes","value":"fn (buf: &'a [u8]) -> SparseDFA<&'a [u8], S>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize a sparse DFA with a specific state identifier\n representation.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":488},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":179469,"byte_end":179477,"line_start":510,"line_end":510,"column_start":12,"column_end":20},"name":"Standard","qualname":"::sparse_imp::Standard","value":"","parent":null,"children":[],"decl_id":null,"docs":" A standard sparse DFA that does not use premultiplication or byte classes.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":501},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":181538,"byte_end":181547,"line_start":573,"line_end":573,"column_start":12,"column_end":21},"name":"ByteClass","qualname":"::sparse_imp::ByteClass","value":"","parent":null,"children":[],"decl_id":null,"docs":" A sparse DFA that shrinks its alphabet.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":298},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210055,"byte_end":210062,"line_start":115,"line_end":115,"column_start":18,"column_end":25},"name":"StateID","qualname":"::state_id::StateID","value":"StateID: Clone + Copy + Debug + Eq + Hash + PartialEq + PartialOrd + Ord","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"decl_id":null,"docs":" A trait describing the representation of a DFA's state identifier.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210403,"byte_end":210413,"line_start":123,"line_end":123,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::state_id::StateID::from_usize","value":"fn (n: usize) -> Self","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Convert from a `usize` to this implementation's representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210905,"byte_end":210913,"line_start":133,"line_end":133,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::state_id::StateID::to_usize","value":"fn (self) -> usize","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Convert this implementation's representation to a `usize`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":211129,"byte_end":211135,"line_start":139,"line_end":139,"column_start":8,"column_end":14},"name":"max_id","qualname":"::state_id::StateID::max_id","value":"fn () -> usize","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Return the maximum state identifier supported by this representation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":211368,"byte_end":211378,"line_start":146,"line_end":146,"column_start":8,"column_end":18},"name":"read_bytes","qualname":"::state_id::StateID::read_bytes","value":"fn (slice: &[u8]) -> Self","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Read a single state identifier from the given slice of bytes in native\n endian format.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":211617,"byte_end":211628,"line_start":153,"line_end":153,"column_start":8,"column_end":19},"name":"write_bytes","qualname":"::state_id::StateID::write_bytes","value":"fn (self, slice: &mut [u8]) -> ()","parent":{"krate":0,"index":298},"children":[],"decl_id":null,"docs":" Write this state identifier to the given slice of bytes in native\n endian format.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":14781,"byte_end":14786,"line_start":334,"line_end":334,"column_start":9,"column_end":14},"name":"dense","qualname":"::dense","value":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":335}],"decl_id":null,"docs":" Types and routines specific to dense DFAs.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","byte_start":15558,"byte_end":15564,"line_start":353,"line_end":353,"column_start":9,"column_end":15},"name":"sparse","qualname":"::sparse","value":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":337}],"decl_id":null,"docs":" Types and routines specific to sparse DFAs.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\classes.rs","byte_start":15930,"byte_end":15941,"line_start":11,"line_end":11,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\classes.rs","byte_start":19365,"byte_end":19376,"line_start":110,"line_end":110,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":28492,"byte_end":28500,"line_start":174,"line_end":174,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":30709,"byte_end":30717,"line_start":240,"line_end":240,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":39779,"byte_end":39787,"line_start":454,"line_end":454,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":43888,"byte_end":43896,"line_start":546,"line_end":546,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":48513,"byte_end":48521,"line_start":675,"line_end":675,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":50452,"byte_end":50461,"line_start":735,"line_end":735,"column_start":41,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":52403,"byte_end":52416,"line_start":796,"line_end":796,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":53970,"byte_end":53992,"line_start":849,"line_end":849,"column_start":41,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":59974,"byte_end":59978,"line_start":1011,"line_end":1011,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":70207,"byte_end":70211,"line_start":1300,"line_end":1300,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":133438,"byte_end":133443,"line_start":172,"line_end":172,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":142978,"byte_end":142985,"line_start":425,"line_end":425,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":143238,"byte_end":143245,"line_start":436,"line_end":436,"column_start":35,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":166433,"byte_end":166442,"line_start":194,"line_end":194,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":217},{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":172928,"byte_end":172937,"line_start":345,"line_end":345,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":176224,"byte_end":176233,"line_start":415,"line_end":415,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231},{"krate":0,"index":232},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":179576,"byte_end":179584,"line_start":514,"line_end":514,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":181646,"byte_end":181655,"line_start":577,"line_end":577,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":182866,"byte_end":182870,"line_start":630,"line_end":630,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":190742,"byte_end":190746,"line_start":863,"line_end":863,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":199478,"byte_end":199483,"line_start":1102,"line_end":1102,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\classes.rs","byte_start":15930,"byte_end":15941,"line_start":11,"line_end":11,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":338},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\classes.rs","byte_start":19365,"byte_end":19376,"line_start":110,"line_end":110,"column_start":21,"column_end":32},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":338},"to":{"krate":1,"index":6707}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":28492,"byte_end":28500,"line_start":174,"line_end":174,"column_start":33,"column_end":41},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":30709,"byte_end":30717,"line_start":240,"line_end":240,"column_start":33,"column_end":41},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":39779,"byte_end":39787,"line_start":454,"line_end":454,"column_start":22,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":346},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":43888,"byte_end":43896,"line_start":546,"line_end":546,"column_start":41,"column_end":49},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":346},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":48513,"byte_end":48521,"line_start":675,"line_end":675,"column_start":41,"column_end":49},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":371},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":50452,"byte_end":50461,"line_start":735,"line_end":735,"column_start":41,"column_end":50},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":384},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":52403,"byte_end":52416,"line_start":796,"line_end":796,"column_start":41,"column_end":54},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":397},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":53970,"byte_end":53992,"line_start":849,"line_end":849,"column_start":41,"column_end":63},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":410},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":59974,"byte_end":59978,"line_start":1011,"line_end":1011,"column_start":33,"column_end":37},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\dense.rs","byte_start":70207,"byte_end":70211,"line_start":1300,"line_end":1300,"column_start":22,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":133438,"byte_end":133443,"line_start":172,"line_end":172,"column_start":14,"column_end":19},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":142978,"byte_end":142985,"line_start":425,"line_end":425,"column_start":22,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\regex.rs","byte_start":143238,"byte_end":143245,"line_start":436,"line_end":436,"column_start":35,"column_end":42},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":451},"to":{"krate":1,"index":3144}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":166433,"byte_end":166442,"line_start":194,"line_end":194,"column_start":34,"column_end":43},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":172928,"byte_end":172937,"line_start":345,"line_end":345,"column_start":22,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":176224,"byte_end":176233,"line_start":415,"line_end":415,"column_start":42,"column_end":51},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":469},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":179576,"byte_end":179584,"line_start":514,"line_end":514,"column_start":42,"column_end":50},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":488},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":181646,"byte_end":181655,"line_start":577,"line_end":577,"column_start":42,"column_end":51},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":501},"to":{"krate":0,"index":146}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":182866,"byte_end":182870,"line_start":630,"line_end":630,"column_start":34,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":190742,"byte_end":190746,"line_start":863,"line_end":863,"column_start":22,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":514},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\sparse.rs","byte_start":199478,"byte_end":199483,"line_start":1102,"line_end":1102,"column_start":22,"column_end":27},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210068,"byte_end":210073,"line_start":116,"line_end":116,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2002},"to":{"krate":0,"index":298}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210076,"byte_end":210080,"line_start":116,"line_end":116,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":1394},"to":{"krate":0,"index":298}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210083,"byte_end":210088,"line_start":116,"line_end":116,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":6707},"to":{"krate":0,"index":298}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210091,"byte_end":210093,"line_start":116,"line_end":116,"column_start":28,"column_end":30},"kind":"SuperTrait","from":{"krate":1,"index":1886},"to":{"krate":0,"index":298}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210096,"byte_end":210100,"line_start":116,"line_end":116,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":6364},"to":{"krate":0,"index":298}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210103,"byte_end":210112,"line_start":116,"line_end":116,"column_start":40,"column_end":49},"kind":"SuperTrait","from":{"krate":1,"index":1882},"to":{"krate":0,"index":298}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210115,"byte_end":210125,"line_start":116,"line_end":116,"column_start":52,"column_end":62},"kind":"SuperTrait","from":{"krate":1,"index":1916},"to":{"krate":0,"index":298}},{"span":{"file_name":"C:\\Users\\SamratKS\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\regex-automata-0.1.8\\src\\state_id.rs","byte_start":210128,"byte_end":210131,"line_start":116,"line_end":116,"column_start":65,"column_end":68},"kind":"SuperTrait","from":{"krate":1,"index":1906},"to":{"krate":0,"index":298}}]}